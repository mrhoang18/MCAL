/**********************************************************
 * @file Lin.h
 * @brief AUTOSAR LIN Driver Header File
 * @details This file contains the necessary definitions for
 *          the LIN driver according to the AUTOSAR standard.
 * @version 1.0
 * @date 2024-11-01
 * @author Tong Xuan Hoang
 **********************************************************/

#ifndef LIN_H
#define LIN_H

#include "stm32f10x.h"        /**< @brief STM32F103 hardware library */
#include "Std_Types.h"        /**< @brief Standard AUTOSAR data types */
#include "Lin_GeneralTypes.h" /**< @brief Common definitions and data types for LIN */
#include "Lin_Types.h"        /**< @brief LIN-specific data types */

/**********************************************************
 * @typedef Lin_ConfigType
 * @brief Configuration structure for the LIN driver.
 * @details This structure contains the necessary information to configure
 *          the LIN driver and settings for SFR that affect the LIN channels.
 **********************************************************/
typedef struct
{
    uint32_t Lin_BaudRate;             /**< @brief Baud rate for the LIN channel. */
    GPIO_TypeDef *Lin_Port;            /**< @brief GPIO port for the LIN channel, e.g., GPIOA. */
    uint16_t Lin_TxPin;                /**< @brief Tx pin for the LIN channel, e.g., GPIO_PIN_9. */
    uint16_t Lin_RxPin;                /**< @brief Rx pin for the LIN channel, e.g., GPIO_PIN_10. */
    uint8_t Lin_Channel;               /**< @brief LIN channel number. */
    FunctionalState Lin_WakeupSupport; /**< @brief Wake-up mode support (TRUE/FALSE). */
    IRQn_Type Lin_IRQn;                /**< @brief Interrupt number for the LIN channel. */
    uint32_t Lin_Prescaler;            /**< @brief Prescaler value for adjusting baud rate. */
    uint32_t Lin_Mode;                 /**< @brief Operating mode of LIN (0: master, 1: slave). */
    uint8_t Lin_TimeoutDuration;       /**< @brief Timeout duration to detect errors. */
} Lin_ConfigType;

/**********************************************************
 * @typedef Lin_FramePidType
 * @brief Type representing a valid protection ID.
 * @details Represents valid protection IDs used by Lin_SendFrame().
 **********************************************************/
typedef uint8 Lin_FramePidType; /**< @brief Range: 0...0xFE */

/**********************************************************
 * @typedef Lin_FrameCsModelType
 * @brief Enum specifying the checksum model.
 * @details Specifies the checksum model used for a LIN frame.
 **********************************************************/
typedef enum
{
    LIN_ENHANCED_CS, /**< @brief Enhanced checksum model */
    LIN_CLASSIC_CS   /**< @brief Classic checksum model */
} Lin_FrameCsModelType;

/**********************************************************
 * @typedef Lin_FrameResponseType
 * @brief Enum specifying the response type of a LIN frame.
 * @details Specifies whether the frame processor needs to transmit a response part or not.
 **********************************************************/
typedef enum
{
    LIN_FRAMERESPONSE_TX,    /**< @brief Response generated by this node */
    LIN_FRAMERESPONSE_RX,    /**< @brief Response generated by another node and relevant to this node */
    LIN_FRAMERESPONSE_IGNORE /**< @brief Response generated by another node and not relevant to this node */
} Lin_FrameResponseType;

/**********************************************************
 * @typedef Lin_FrameDlType
 * @brief Type specifying the data length.
 * @details Specifies the number of data bytes (SDU) to be copied.
 **********************************************************/
typedef uint8 Lin_FrameDlType; /**< @brief Range: 1...8 */

/**********************************************************
 * @typedef Lin_PduType
 * @brief Structure providing information about a PDU.
 * @details Provides the PID, checksum model, data length, and SDU pointer.
 **********************************************************/
typedef struct
{
    Lin_FramePidType Pid;      /**< @brief PID of the LIN frame */
    Lin_FrameCsModelType Cs;   /**< @brief Checksum model */
    Lin_FrameResponseType Drc; /**< @brief Response type */
    Lin_FrameDlType Dl;        /**< @brief Data length */
    uint8 *SduPtr;             /**< @brief Pointer to the SDU data */
} Lin_PduType;

/**********************************************************
 * @typedef Lin_StatusType
 * @brief Enum representing the status of a LIN channel or frame.
 * @details The operational status returned by the Lin_GetStatus() service.
 **********************************************************/
typedef enum
{
    LIN_NOT_OK,          /**< @brief Error occurred during operation */
    LIN_TX_OK,           /**< @brief Transmission successful */
    LIN_RX_OK,           /**< @brief Correct response received */
    LIN_TX_BUSY,         /**< @brief Transmitting */
    LIN_TX_HEADER_ERROR, /**< @brief Error during header transmission */
    LIN_TX_ERROR,        /**< @brief Error during response transmission */
    LIN_RX_BUSY,         /**< @brief Receiving data */
    LIN_RX_ERROR,        /**< @brief Error during data reception */
    LIN_RX_NO_RESPONSE,  /**< @brief No response received */
    LIN_OPERATIONAL,     /**< @brief Normal operational state */
    LIN_CH_SLEEP         /**< @brief Sleep state of the channel */
} Lin_StatusType;

/**********************************************************
 * @typedef Lin_SlaveErrorType
 * @brief Enum representing errors that occur during the LIN node response.
 * @details Includes errors such as header error, checksum error, no response, etc.
 **********************************************************/
typedef enum
{
    LIN_ERR_HEADER,       /**< @brief Header error */
    LIN_ERR_RESP_STOPBIT, /**< @brief Framing error in response */
    LIN_ERR_RESP_CHKSUM,  /**< @brief Checksum error */
    LIN_ERR_RESP_DATABIT, /**< @brief Data bit monitoring error in response */
    LIN_ERR_NO_RESP,      /**< @brief No response */
    LIN_ERR_INC_RESP      /**< @brief Incomplete response */
} Lin_SlaveErrorType;

/**********************************************************
 * @brief Initialize the LIN module.
 * @param Config Pointer to the LIN configuration structure.
 **********************************************************/
void Lin_Init(const Lin_ConfigType *Config);

/**********************************************************
 * @brief Check the wake-up event for a LIN channel.
 * @param Channel The LIN channel to check.
 * @return `E_OK` if the check is successful, `E_NOT_OK` if it fails.
 **********************************************************/
Std_ReturnType Lin_CheckWakeup(uint8 Channel);

/**********************************************************
 * @brief Get version information of the LIN driver.
 * @param versioninfo Pointer to the structure to store the version information.
 **********************************************************/
void Lin_GetVersionInfo(Std_VersionInfoType *versioninfo);

/**********************************************************
 * @brief Send a LIN frame.
 * @param Channel The LIN channel from which the frame will be sent.
 * @param PduInfoPtr Pointer to the PDU containing the information to send.
 * @return `E_OK` if successful, `E_NOT_OK` if failed.
 **********************************************************/
Std_ReturnType Lin_SendFrame(uint8 Channel, const Lin_PduType *PduInfoPtr);

/**********************************************************
 * @brief Put the LIN channel into sleep mode.
 * @param Channel The LIN channel to put into sleep mode.
 * @return `E_OK` if successful, `E_NOT_OK` if failed.
 **********************************************************/
Std_ReturnType Lin_GoToSleep(uint8 Channel);

/**********************************************************
 * @brief Put the LIN channel into sleep mode and activate wake-up detection.
 * @param Channel The LIN channel to process.
 * @return `E_OK` if successful, `E_NOT_OK` if failed.
 **********************************************************/
Std_ReturnType Lin_GoToSleepInternal(uint8 Channel);

/**********************************************************
 * @brief Generate a wake-up pulse and set the channel status to LIN_CH_OPERATIONAL.
 * @param Channel The LIN channel to generate the wake-up pulse for.
 * @return `E_OK` if successful, `E_NOT_OK` if failed.
 **********************************************************/
Std_ReturnType Lin_Wakeup(uint8 Channel);

/**********************************************************
 * @brief Get the current status of the LIN channel.
 * @param Channel The LIN channel to check.
 * @param Lin_SduPtr Pointer to a pointer that will hold the current SDU.
 * @return The current status of the LIN channel.
 **********************************************************/
Lin_StatusType Lin_GetStatus(uint8 Channel, const uint8 **Lin_SduPtr);

#endif /* LIN_H */
