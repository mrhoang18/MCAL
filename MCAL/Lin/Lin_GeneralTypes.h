/**********************************************************
 * @file Lin_GeneralTypes.h
 * @brief General definitions for the LIN driver according to the AUTOSAR standard.
 * @details This file contains data types and common definitions used
 *          in the LIN driver for STM32F103.
 * @version 1.0
 * @date 2024-11-01
 * @author Tong Xuan Hoang
 **********************************************************/

#ifndef LIN_GENERAL_TYPES_H
#define LIN_GENERAL_TYPES_H

#include "Std_Types.h"

/**********************************************************
 * @typedef Lin_FramePidType
 * @brief Type representing a valid protected ID of a LIN frame.
 **********************************************************/
typedef uint8 Lin_FramePidType; /**< @brief Range: 0...0xFE */

/**********************************************************
 * @typedef Lin_FrameCsModelType
 * @brief Enum specifying the checksum model used for a LIN frame.
 **********************************************************/
typedef enum
{
    LIN_ENHANCED_CS, /**< @brief Enhanced checksum model */
    LIN_CLASSIC_CS   /**< @brief Classic checksum model */
} Lin_FrameCsModelType;

/**********************************************************
 * @typedef Lin_FrameResponseType
 * @brief Enum specifying the response type of a LIN frame.
 **********************************************************/
typedef enum
{
    LIN_FRAMERESPONSE_TX,    /**< @brief Response generated by this node */
    LIN_FRAMERESPONSE_RX,    /**< @brief Response generated by another node and relevant to this node */
    LIN_FRAMERESPONSE_IGNORE /**< @brief Response generated by another node and not relevant to this node */
} Lin_FrameResponseType;

/**********************************************************
 * @typedef Lin_FrameDlType
 * @brief Type specifying the data length of a LIN frame.
 **********************************************************/
typedef uint8 Lin_FrameDlType; /**< @brief Range: 1...8 */

/**********************************************************
 * @typedef Lin_StatusType
 * @brief Enum representing the status of a LIN channel or frame.
 **********************************************************/
typedef enum
{
    LIN_NOT_OK,          /**< @brief Error occurred during operation */
    LIN_TX_OK,           /**< @brief Transmission successful */
    LIN_RX_OK,           /**< @brief Correct response received */
    LIN_TX_BUSY,         /**< @brief Transmitting */
    LIN_TX_HEADER_ERROR, /**@brief Error during header transmission */
    LIN_TX_ERROR,        /**< @brief Error during response transmission */
    LIN_RX_BUSY,         /**< @brief Receiving data */
    LIN_RX_ERROR,        /**< @brief Error during data reception */
    LIN_RX_NO_RESPONSE,  /**< @brief No response received */
    LIN_OPERATIONAL,     /**< @brief Normal operational state */
    LIN_CH_SLEEP         /**< @brief Sleep state of the channel */
} Lin_StatusType;

/**********************************************************
 * @typedef Lin_SlaveErrorType
 * @brief Enum representing errors that occur during the response of a LIN node.
 **********************************************************/
typedef enum
{
    LIN_ERR_HEADER,       /**< @brief Error in the header */
    LIN_ERR_RESP_STOPBIT, /**< @brief Framing error in the response */
    LIN_ERR_RESP_CHKSUM,  /**< @brief Checksum error */
    LIN_ERR_RESP_DATABIT, /**< @brief Data bit monitoring error in the response */
    LIN_ERR_NO_RESP,      /**< @brief No response */
    LIN_ERR_INC_RESP      /**< @brief Incomplete response */
} Lin_SlaveErrorType;

#endif /* LIN_GENERAL_TYPES_H */
